// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dibrito/ennismore-weather-app/internal/repository (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -package cache_mock --destination=./gen/mock/repository/memory/cache_mock.go github.com/dibrito/ennismore-weather-app/internal/repository Repository
//

// Package cache_mock is a generated GoMock package.
package cache_mock

import (
	reflect "reflect"

	model "github.com/dibrito/ennismore-weather-app/pkg/model"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// GetCache mocks base method.
func (m *MockRepository) GetCache() model.CacheResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCache")
	ret0, _ := ret[0].(model.CacheResponse)
	return ret0
}

// GetCache indicates an expected call of GetCache.
func (mr *MockRepositoryMockRecorder) GetCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCache", reflect.TypeOf((*MockRepository)(nil).GetCache))
}

// GetLocation mocks base method.
func (m *MockRepository) GetLocation(arg0 string) (model.Location, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocation", arg0)
	ret0, _ := ret[0].(model.Location)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetLocation indicates an expected call of GetLocation.
func (mr *MockRepositoryMockRecorder) GetLocation(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocation", reflect.TypeOf((*MockRepository)(nil).GetLocation), arg0)
}

// GetPeriods mocks base method.
func (m *MockRepository) GetPeriods(arg0, arg1 string) (model.Period, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeriods", arg0, arg1)
	ret0, _ := ret[0].(model.Period)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetPeriods indicates an expected call of GetPeriods.
func (mr *MockRepositoryMockRecorder) GetPeriods(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeriods", reflect.TypeOf((*MockRepository)(nil).GetPeriods), arg0, arg1)
}

// PutLocation mocks base method.
func (m *MockRepository) PutLocation(arg0 string, arg1 model.Location) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutLocation", arg0, arg1)
}

// PutLocation indicates an expected call of PutLocation.
func (mr *MockRepositoryMockRecorder) PutLocation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutLocation", reflect.TypeOf((*MockRepository)(nil).PutLocation), arg0, arg1)
}

// PutPeriods mocks base method.
func (m *MockRepository) PutPeriods(arg0, arg1 string, arg2 model.Period) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PutPeriods", arg0, arg1, arg2)
}

// PutPeriods indicates an expected call of PutPeriods.
func (mr *MockRepositoryMockRecorder) PutPeriods(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPeriods", reflect.TypeOf((*MockRepository)(nil).PutPeriods), arg0, arg1, arg2)
}
